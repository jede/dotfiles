set visualbell
set noswapfile

runtime autoload/sonokai.vim
call sonokai#get_configuration()

set iskeyword+=-
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.tmp/*,*/tmp/*,tmp/*,*/temp/*,*/.jhw-cache/*,*/.build/*,*/.meteor/*,*/node_modules/*,*/coverage/*,*/out/*

set grepprg=ack\ --nogroup\ --nocolor

let mapleader = " "

set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides

filetype plugin on

set matchpairs+=<:>

set hidden " hide current buffer when opening a new

""
"" Whitespace
""

set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set autoindent

if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the left of the screen

""
"" Searching
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


""
"" Plugins
""

set rtp+=/usr/local/opt/fzf


let g:ale_linters = {
\   'javascript': ['standard'],
\}

let g:ale_fixers = {
\   'javascript': ['standard'],
\}

let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1

let g:syntastic_javascript_checkers = ['jsxhint']

let g:jsx_ext_required = 0

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

let g:lightline = {
      \ 'colorscheme': 'sonokai',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
set laststatus=2

let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
                        \ 'enter': { 'shift': 1 },
                        \ 'links': { 'external': { 'enable': 1 } },
                        \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
                        \ 'checkbox': { 'toggles': [' ', 'x'] },
                        \ 'fold': { 'enable': 1 } }

let g:polyglot_disabled = ['markdown']
au  BufNewFile,BufRead *.handlebars,*.hdbs,*.hbs,*.hb runtime! indent/handlebars.vim

let test#strategy = 'iterm'

let g:prettier#exec_cmd_path = "~/.nvm/versions/node/v14.15.5/bin/node ~/.nvm/versions/node/v14.15.5/bin/prettier"

" Coc setup

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

"" Use tab for trigger completion with characters ahead and navigate.
"" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

" Make <tab> used for trigger completion, completion confirm, snippet expand and jump like VSCode.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gp <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>



""
"" Mappings
""

"save
nnoremap ยง :wa
nnoremap <Leader><CR> :wa

"Paste without moving the cursor
nnoremap <Leader>p p`[
nnoremap <Leader>P P`[

"Delete without yanking
nnoremap <leader>d "_d
xnoremap <leader>d "_d

"Split switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Newlines on enter wo insert mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

"Clear highlights
nnoremap <ESC> :nohlsearch<CR>

"Fugitive
nmap <leader>gb :Gblame<CR>

"FZF
nnoremap <silent> <C-p> :FZF<CR>

" NERDTree
map <leader>n :NERDTreeToggle<CR>
let g:NERDTreeChDirMode = 2

" VIM Test
"
map <leader>tr :TestNearest<CR>
map <leader>tf :TestFile<CR>
map <leader>ta :TestSuite<CR>
map <leader>tt :TestLast<CR>

" Init ragtag for custom filetypes

autocmd FileType jst call RagtagInit()

" Find file types
autocmd BufNewFile,BufRead *.scss setf scss
autocmd BufNewFile,BufRead *.txt set filetype=markdown

" Autosave on blur
autocmd FocusLost * silent! wa

" Set working dir on new tab
autocmd TabNew * silent! tcd %:p:h

" Prettier
nmap <Leader>= <Plug>(Prettier)



" improve js (coffee?) highlighting
" set lsp=2
" hi link jsObjectKey             Identifier
" hi link jsNoise                SpecialChar
" hi link jsBrackets             SpecialChar
" hi link jsParens               SpecialChar
" hi link jsBraces               SpecialChar
" hi link jsFuncBraces           SpecialChar
" hi link jsFuncParens           SpecialChar
" hi link jsClassBraces          SpecialChar
" hi link jsClassNoise           SpecialChar
" hi link jsObjectBraces         SpecialChar
" hi link jsObjectSeparator      SpecialChar
" hi link jsDestructuringBraces  SpecialChar


if has("gui_running")
  set guifont=Inconsolata:h12
endif

if has("gui_macvim")
  " Command-Shift-F on OSX
  map <D-F> :Ack<space>

  " FZF
  map  <D-t> :FZF<CR>
  imap <D-t> <ESC>:FZF<CR>


" tab bindings
"
  map  <D-A-LEFT> :tabp<CR>
  map  <D-A-RIGHT> :tabn<CR>

  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>

  " Switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>
  " Command-0 goes to the last tab
  noremap <D-0> :tablast<CR>
  " Set tab title to current dir
  function! GuiTabLabel()
    return substitute( expand( '%:p' ), '.\+\/\(.\+\)\/.\+', '\1', '' )
  endfunction
  set guitablabel=%{GuiTabLabel()}

endif

" let g:vim_monokai_tasty_italic = 1
" colorscheme vim-monokai-tasty

set termguicolors
let g:sonokai_style = 'atlantis'
colorscheme sonokai

