set visualbell
set noswapfile
set shell=/bin/bash


set iskeyword+=-
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.tmp/*,*/tmp/*,tmp/*,*/temp/*,*/.jhw-cache/*,*/.build/*,*/.meteor/*,*/node_modules/*,*/coverage/*,*/out/*

set grepprg=ag\ --nogroup\ --nocolor

let mapleader = " "

set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides

filetype plugin on

set matchpairs+=<:>

set hidden " hide current buffer when opening a new

""
"" Whitespace
""

set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set autoindent

if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the left of the screen

""
"" Searching
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


""
"" Plugins
""

set rtp+=/usr/local/opt/fzf


let g:ale_linters = {
\   'javascript': ['standard'],
\}

let g:ale_fixers = {
\   'javascript': ['standard'],
\}

let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1

let g:syntastic_javascript_checkers = ['jsxhint']

let g:jsx_ext_required = 0

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

let g:lightline = {
      \ 'colorscheme': 'sonokai',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
set laststatus=2

let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
                        \ 'enter': { 'shift': 1 },
                        \ 'links': { 'external': { 'enable': 1 } },
                        \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
                        \ 'checkbox': { 'toggles': [' ', 'x'] },
                        \ 'fold': { 'enable': 1 } }

let g:polyglot_disabled = ['markdown']
" au  BufNewFile,BufRead *.handlebars,*.hdbs,*.hbs,*.hb runtime! indent/handlebars.vim

let test#strategy = 'iterm'

let g:prettier#exec_cmd_path = "~/.nvm/versions/node/v14.16.1/bin/node ~/.nvm/versions/node/v14.16.1/bin/prettier"

" Coc setup

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

let g:coc_global_extensions = [
\ 'coc-snippets',
\ 'coc-json',
\ 'coc-tsserver',
\ 'coc-html',
\ 'coc-css',
\ 'coc-yaml',
\ 'coc-docker',
\ 'coc-python',
\ 'coc-sh',
\ 'coc-highlight',
\ 'coc-ember',
\ ]


""
"" Mappings
""

"Close buffer

nmap <leader>q :q<CR>
nmap <leader>w :wq<CR>

"save
nnoremap ยง :wa
nnoremap <Leader><CR> :wa

"Paste without moving the cursor
nnoremap <Leader>p p`[
nnoremap <Leader>P P`[

"Delete without yanking
nnoremap <leader>d "_d
xnoremap <leader>d "_d

"Split switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Newlines on enter wo insert mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

"Clear highlights
nnoremap <ESC> :nohlsearch<CR>

"Fugitive
nmap <leader>gb :Git blame<CR>
nmap <leader>g :Git<CR>
nmap <leader>gp :Git push<CR>

"FZF
nnoremap <silent> <C-p> :FZF<CR>

" NERDTree
map <leader>n :NERDTreeToggle<CR>
let g:NERDTreeChDirMode = 2

" VIM Test
"
map <leader>tr :TestNearest<CR>
map <leader>tf :TestFile<CR>
map <leader>ta :TestSuite<CR>
map <leader>tt :TestLast<CR>

" Init ragtag for custom filetypes

autocmd FileType jst call RagtagInit()

" Find file types
autocmd BufNewFile,BufRead *.scss setf scss
autocmd BufNewFile,BufRead *.txt set filetype=markdown

" Autosave on blur
autocmd FocusLost * silent! wa

" Set working dir on new tab
autocmd TabNew * silent! tcd %:p:h

" Prettier
nmap <Leader>= <Plug>(Prettier)




if has("gui_running")
  set guifont=Inconsolata:h12
endif

if has("gui_macvim")
  " Command-Shift-F on OSX
  map <D-F> :Ack<space>

  " FZF
  map  <D-t> :FZF<CR>
  imap <D-t> <ESC>:FZF<CR>


" tab bindings
"
  map  <D-A-LEFT> :tabp<CR>
  map  <D-A-RIGHT> :tabn<CR>

  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>

  " Switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>
  " Command-0 goes to the last tab
  noremap <D-0> :tablast<CR>
  " Set tab title to root dir
  function! GuiTabLabel()
    let path = FindRootDirectory()
    if len(path) == 0
      " return substitute( expand( '%:p' ), '.\+\/\(.\+\)\/.\+', '\1', '' )
      return expand('%:t')
    endif
    return substitute( path, '.\+\/\(.\+\)', '\1', '' )
  endfunction
  set guitablabel=%{GuiTabLabel()}

endif

set termguicolors


packadd! sonokai
" let g:sonokai_better_performance = 1
let g:sonokai_style = 'shusia'

function! s:sonokai_custom()
  " Link a highlight group to a predefined highlight group.
  " See `colors/sonokai.vim` for all predefined highlight groups.

  " improve js highlighting

  highlight! link jsObjectKey            Identifier
  highlight! link jsNoise                SpecialChar
  highlight! link jsBrackets             SpecialChar
  highlight! link jsParens               SpecialChar
  highlight! link jsBraces               SpecialChar
  highlight! link jsFuncBraces           SpecialChar
  highlight! link jsFuncParens           SpecialChar
  highlight! link jsClassBraces          SpecialChar
  highlight! link jsClassNoise           SpecialChar
  highlight! link jsObjectBraces         SpecialChar
  highlight! link jsTryCatchBraces       SpecialChar
  highlight! link jsIfElseBraces         SpecialChar
  highlight! link jsObjectSeparator      SpecialChar
  highlight! link jsDestructuringBraces  SpecialChar
  highlight! link jsFuncArgs             Identifier
endfunction

augroup SonokaiCustom
  autocmd!
  autocmd ColorScheme sonokai call s:sonokai_custom()
  " Fix vim-polyglot load order issue
  autocmd FileType javascript call s:sonokai_custom()
augroup END


colorscheme sonokai




